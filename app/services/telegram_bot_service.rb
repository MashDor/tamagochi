require 'telegram/bot'

class TelegramBotService
  TOKEN = ENV['TELEGRAM_BOT_TOKEN'] # –•—Ä–∞–Ω–∏–º —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  class << self
    def listen
      Telegram::Bot::Client.run(TOKEN) do |bot|
        bot.listen do |message|
          user = UserService.getUserFromTelegram(message.from.id, message.from.first_name)

          case message.text
          when '/start'
            if user.current_pet
              pet = user.current_pet

              bot.api.send_message(
                chat_id: message.chat.id,
                text: "–ü—Ä–∏–≤–µ—Ç, #{user.name}! –¢–≤–æ–π –ø—É—à–∏—Å—Ç–∏–∫ —Å–∫—É—á–∞–ª.\n\n#{pet.state_message}",
                parse_mode: "Markdown",
                reply_markup: main_keyboard
              )
            else
              bot.api.send_message(
                chat_id: message.chat.id,
                text: "–ü—Ä–∏–≤–µ—Ç, #{user.name}! –ì–æ—Ç–æ–≤ –∑–∞–≤–µ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?",
                reply_markup: start_keyboard
              )
            end
          when '–ó–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ üê∂'
            text = ""
            begin
              pet = PetService.create_pet(user)

              text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–æ—á–µ–∫ —à–µ—Ä—Å—Ç–∏ –∏ —Ä–∞–¥–æ—Å—Ç–∏üê∂\n\n#{pet.state_message}"
            rescue PetAlreadyExistsError => e
              text = "–¢–µ–±–µ —É–∂–µ –µ—Å—Ç—å –æ –∫–æ–º –∑–∞–±–æ—Ç–∏—Ç—å—Å—è"
            end
            bot.api.send_message(
              chat_id: message.chat.id,
              text: text,
              parse_mode: "Markdown",
              reply_markup: main_keyboard
            )
          when '–ö–∞–∫ –¥–µ–ª–∞ —É –º–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ ‚ùì'
            if user.current_pet
              bot.api.send_message(chat_id: message.chat.id, text: user.current_pet.state_message, parse_mode: "Markdown")
            else
              bot.api.send_message(
                chat_id: message.chat.id,
                text: "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ì–æ—Ç–æ–≤ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –¥—Ä—É–≥–∞?",
                reply_markup: main_keyboard
              )
            end
          when '–ü–æ–∫–æ—Ä–º–∏—Ç—å —Ä—ã–±–∫–æ–π üêü'
            if user.current_pet
              user.current_pet.feed()
              bot.api.send_message(chat_id: message.chat.id, text: "–†—ã–±–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∂–∏–≤–æ—Ç–∏–∫ üòã\n\n#{user.current_pet.state_message}", parse_mode: "Markdown")
            else
              bot.api.send_message(
                chat_id: message.chat.id,
                text: "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ì–æ—Ç–æ–≤ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –¥—Ä—É–≥–∞?",
                reply_markup: main_keyboard
              )
            end
          else
            bot.api.send_message(chat_id: message.chat.id, text: "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É ü§î –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ /start")
          end
        end
      end
    end

    def start_keyboard
      Telegram::Bot::Types::ReplyKeyboardMarkup.new(
        keyboard: [
          [Telegram::Bot::Types::KeyboardButton.new(text: '–ó–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ üê∂')],
        ],
        resize_keyboard: true,
      )
    end

    def main_keyboard
      Telegram::Bot::Types::ReplyKeyboardMarkup.new(
        keyboard: [
          [Telegram::Bot::Types::KeyboardButton.new(text: '–ö–∞–∫ –¥–µ–ª–∞ —É –º–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ ‚ùì')],
          [Telegram::Bot::Types::KeyboardButton.new(text: '–ü–æ–∫–æ—Ä–º–∏—Ç—å —Ä—ã–±–∫–æ–π üêü')],
        ],
        resize_keyboard: true,
      )
    end
  end
end

